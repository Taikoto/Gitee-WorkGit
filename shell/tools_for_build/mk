#!/bin/bash

BS_DIR_TOP=$(cd `dirname $0` ; pwd)
ANDROID_BUILD_SRC=$(cd `dirname $0`; pwd)
SRC_DIR=$(cd `dirname $0` ; pwd)
BS_DIR_SRC=../${BS_DIR_TOP}

BS_DIR_RELEASE=${BS_DIR_TOP}/release
BS_DIR_IMG=${BS_DIR_TOP}/out/target/product/ecarxICp1_64

BOARD="full_ecarxICp1_64-userdebug"
#BOARD=$(cat Boardinfo.ini)

#BOARD=$TARGET_PRODUCT-$TARGET_BUILD_VARIANT
Files="filelist.txt"

starttime=`date +'%Y-%m-%d %H:%M:%S'`;
dos2unix ${SRC_DIR}/$Files

git_clone()
{
    file_list=${SRC_DIR}/$Files

    cat ${file_list} | while  read line
    do
        FILE_LIST=${line}
        if [ "$FILE_LIST" != "NONE"  ]; then
            echo ${FILE_LIST}
            proxychains4 git clone "ssh://taibin.zhang@extcode.ecarx.com.cn:29418/projects/E02_ANDROID_9_RELEASE/${FILE_LIST}"
            cd ${SRC_DIR}/${FILE_LIST}
            git checkout Bdstar_for_ecarx && git checkout .
            cd ${SRC_DIR}
        else
            cd ${SRC_DIR}		
        fi
    done
	
    ln -s build/soong/root.bp Android.bp
    ln -s build/soong/bootstrap.bash bootstrap.bash
    ln -s build/core/root.mk Makefile
}

git_pull()
{
    file_list=${SRC_DIR}/$Files

    cat ${file_list} | while  read line
    do
        FILE_LIST=${line}
        if [ "$FILE_LIST" != "NONE"  ]; then
            echo ${FILE_LIST}
            cd ${SRC_DIR}/${FILE_LIST}
            proxychains4 git pull
            cd ${SRC_DIR}
	else
            cd ${SRC_DIR}
        fi	
    done
}

git_checkout()
{
    file_list=${SRC_DIR}/$Files

    cat ${file_list} | while  read line
    do
        FILE_LIST=${line}
        if [ "$FILE_LIST" != "NONE"  ]; then
            echo ${FILE_LIST}
            cd ${SRC_DIR}/${FILE_LIST}
            proxychains4 git checkout .
            cd ${SRC_DIR}
        else
            cd ${SRC_DIR}
        fi
    done
}

git_status()
{
    file_list=${SRC_DIR}/$Files

    cat ${file_list} | while  read line
    do
        FILE_LIST=${line}
        if [ "$FILE_LIST" != "NONE"  ]; then
            echo ${FILE_LIST}
            cd ${SRC_DIR}/${FILE_LIST}
            proxychains4 git status
            cd ${SRC_DIR}
        else
            cd ${SRC_DIR}
        fi
    done
}

git_branch()
{
    file_list=${SRC_DIR}/$Files

    cat ${file_list} | while  read line
    do
        FILE_LIST=${line}
        if [ "$FILE_LIST" != "NONE"  ]; then
            echo ${FILE_LIST}
            cd ${SRC_DIR}/${FILE_LIST} 
            proxychains4 git checkout  Bdstar_for_ecarx #Bdstar_for_ecarx Bdstar_Branch
            cd ${SRC_DIR}
        else
            cd ${SRC_DIR}
        fi
    done
}

setup_environment()
{
    source build/envsetup.sh;
    lunch ${BOARD}
}

build_bootloader_preloader()
{
    make pl 2>&1 | tee preloader.log || return 1

    echo "^_^ preloader path: ${BS_DIR_IMG}/preloader.bin"
    return 0
}

build_bootloader_uboot()
{
    make lk 2>&1 | tee uboot.log || return 1
  
    echo "^_^ uboot path: ${BS_DIR_IMG}/u-boot-sign.bin"
    return 0
}

build_system()
{
    make systemimage 2>&1 | tee system.log || return 1
    echo "^_^ system path: ${BS_DIR_IMG}/system.img"
    return 0
}

package_system()
{
    make snod || return 1
    echo "^_^ system path: ${BS_DIR_IMG}/system.img"
    return 0
}

build_kernel()
{
    make bootimage dtboimage 2>&1 | tee kernel.log || return 1
    echo "^_^ kernel path: ${BS_DIR_IMG}/boot.img"
    return 0
}

build_secro()
{
    make secroimage 2>&1 | tee secro.log || return 1
    echo "^_^ secro path: ${BS_DIR_IMG}/secro.img"
    return 0
}

build_all()
{
    make update-api
    make -j${threads} 2>&1 | tee build.log || return 1

    echo "^_^ release path: ${BS_DIR_RELEASE}"
  
    return 0
}


threads=128
clone=no
pull=no
checkout=no
status=no
branch=no
uboot=no
kernel=no
system=no
snod=no
secro=no
all=no

if [ -z $1 ]; then
    all=yes
fi

while [ "$1" ]; do
    case "$1" in
    -j*)
    x=$1
        threads=${x#-j}
	;;
    -cl|-clone)
        clone=yes
        ;;
    -pu|-pull)
        pull=yes
        ;;
    -co|-checkout)
        checkout=yes
        ;;
    -st|-status)
        status=yes
        ;;
    -br|-branch)
        branch=yes
        ;;
    -p|-preloader)
        preloader=yes
        ;;
    -u|-uboot)
	uboot=yes
	;;
    -k|-kernel)
	kernel=yes
	;;
    -s|-system)
	system=yes
	;;
    -sn|-snod)
        snod=yes
        ;;
    -se|secro)
        secro=yes
        ;;
    -a|-all)
        all=yes
	;;
    -h|-help)
	cat >&2 <<EOF
Usage: ./mk [OPTION]
Build script for compile the source of telechips project.

  -j=n                using n threads when building source project (example: -j=16)
  -cl,-clone          git clone
  -pu,-pull           git pull
  -co,-checkout       git checkout
  -st,-status         git status
  -br,-branch         git branch
  -p, -preloader      build bootloader preloader from source
  -u, -uboot          build bootloader uboot from source
  -k, -kernel         build kernel from source
  -s, -system         build system from source
  -sn,-snod           fast package system.img
  -se,-secro          build secro from source
  -a, -all            build all, include anything
  -h, -help           display this help and exit
  note : default build all 
  
EOF
	exit 0
	;;
    *)
	echo "./mk: Unrecognised option $1" >&2
	exit 1
	;;
    esac
    shift
done

if [ "${clone}" = yes ]; then
    git_clone || exit 1
fi

if [ "${pull}" = yes ]; then
    git_pull || exit 1
fi

if [ "${checkout}" = yes ]; then
    git_checkout || exit 1
fi

if [ "${status}" = yes ]; then
    git_status || exit 1
fi

if [ "${branch}" = yes ]; then
    git_branch || exit 1
fi

setup_environment || exit 1

if [ "${preloader}" = yes ]; then
    build_bootloader_preloader || exit 1
fi

if [ "${uboot}" = yes ]; then
    build_bootloader_uboot || exit 1
fi

if [ "${kernel}" = yes ]; then
    build_kernel || exit 1
fi

if [ "${system}" = yes ]; then
    build_system || exit 1
fi

if [ "${snod}" = yes ]; then
    package_system || exit 1
fi

if [ "${secro}" = yes ]; then
    build_secro || exit 1
fi

if [ "${all}" = yes ]; then
    build_all || exit 1
    ./pac
fi

endtime=`date +'%Y-%m-%d %H:%M:%S'`;
start_seconds=$(date --date="$starttime" +%s);
end_seconds=$(date --date="$endtime" +%s);
seconds=$((end_seconds-start_seconds));
hour=$(($seconds / 3600));
min=$(($seconds / 60 % 60));
sec=$(($seconds % 60 % 60));

echo -e "开始时间：\033[32m $starttime \033[0m"
echo -e "结束时间：\033[32m $endtime \033[0m"
echo -e "本次运行时间：\033[32m $hour:$min:$sec \033[0m"

exit 0
